public class QuickSort{
    public int partition(int arr[],int start,int end){
        int pivot = arr[end];
        int i = start-1;
        for(int j = start;j<end;j++){
            if(arr[j]<pivot){ //checking if the lement is smaller than pivot point
                i++;
                int temp =arr[i]; //if an element is smaller than the pivot then swapping the smaller value at i and putting the bigger value at j
                arr[i] =arr[j];
                arr[j] = temp;
            }
        } 
         i++; //lastly once all the smaller value is in the right side of pivot putting the pivot value at the i++ value so that elements before it is small and after it is big
                int temp =arr[i];
                arr[i] =arr[end];
                arr[end] = temp;
        return i;
    }
    public void quickSort(int arr[],int start,int end){
        if(start<end){
            int pivot = partition(arr,start,end);
            quickSort(arr, start, pivot-1);
            quickSort(arr, pivot+1, end);
        }
    }
    public static void main(String[] args) {
        int arr[] ={3,1,56,4,3,55,6,3,4,2,6,45,4,345,56,3,345,56,45,3,43,34,66,2,1,11,33,22,44,55,6,77,5645,3453,22,453453,56,345,34,23,23,45,45,6,56,34,7678,658,87,7,78,2,1,11,33,22,44,55,6,77,5645,3453,22,453453,56,345,34,23,23,45,45,6,56,34,7678,658,87,7,78,2,1,11,33,22,44,55,6,77,5645,3453,22,453453,56,345,34,23,23,45,45,6,56,34,7678,658,87,7,78,2,1,11,33,22,44,55,6,77,5645,3453,22,453453,56,345,34,23,23,45,45,6,56,34,7678,658,87,7,78,2,1,11,33,22,44,55,6,77,5645,3453,22,453453,56,345,34,23,23,45,45,6,56,34,7678,658,87,7,78,2,1,11,33,22,44,55,6,77,5645,3453,22,453453,56,345,34,23,23,45,45,6,56,34,7678,658,87,7,78,2,1,11,33,22,44,55,6,77,5645,3453,22,453453,56,345,34,23,23,45,45,6,56,34,7678,658,87,7,78,2,1,11,33,22,44,55,6,77,5645,3453,22,453453,56,345,34,23,23,45,45,6,56,34,7678,658,87,7,78,2,1,11,33,22,44,55,6,77,5645,3453,22,453453,56,345,34,23,23,45,45,6,56,34,7678,658,87,7,78,2,1,11,33,22,44,55,6,77,5645,3453,22,453453,56,345,34,23,23,45,45,6,56,34,7678,658,87,7,78,2,1,11,33,22,44,55,6,77,5645,3453,22,453453,56,345,34,23,23,45,45,6,56,34,7678,658,87,7,78,2,1,11,33,22,44,55,6,77,5645,3453,22,453453,56,345,34,23,23,45,45,6,56,34,7678,658,87,7,78,2,1,11,33,22,44,55,6,77,5645,3453,22,453453,56,345,34,23,23,45,45,6,56,34,7678,658,87,7,78,2,1,11,33,22,44,55,6,77,5645,3453,22,453453,56,345,34,23,23,45,45,6,56,34,7678,658,87,7,78,2,1,11,33,22,44,55,6,77,5645,3453,22,453453,56,345,34,23,23,45,45,6,56,34,7678,658,87,7,78,2,1,11,33,22,44,55,6,77,5645,3453,22,453453,56,345,34,23,23,45,45,6,56,34,7678,658,87,7,78,2,1,11,33,22,44,55,6,77,5645,3453,22,453453,56,345,34,23,23,45,45,6,56,34,7678,658,87,7,78,2,1,11,33,22,44,55,6,77,5645,3453,22,453453,56,345,34,23,23,45,45,6,56,34,7678,658,87,7,78,2,1,11,33,22,44,55,6,77,5645,3453,22,453453,56,345,34,23,23,45,45,6,56,34,7678,658,87,7,78,2,1,11,33,22,44,55,6,77,5645,3453,22,453453,56,345,34,23,23,45,45,6,56,34,7678,658,87,7,78};
        QuickSort q = new QuickSort();
        q.quickSort(arr,0,arr.length-1);
        for(int i = 0;i<arr.length;i++){
            System.out.println(arr[i]);
        }
    }
}